import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './index.css';
import axios from 'axios';
import EyeHide from '../assets/eyeHide';
import EyeShow from '../assets/eyeShow';
import Logo from '../assets/logo';

// 'Íµ¨'Ïóê Îî∞Î•∏ 'Îèô' Îç∞Ïù¥ÌÑ∞
const dongData = {
  Í¥ëÏÇ∞Íµ¨: [
    'ÎèÑÏÇ∞Îèô',
    'ÎèôÍ≥°Îèô',
    'Î≥∏ÎüâÎèô',
    'ÎπÑÏïÑÎèô',
    'ÏÇºÎèÑÎèô',
    'ÏÜ°Ï†ïÎèô',
    'ÏàòÏôÑÎèô',
    'Ïã†Í∞ÄÎèô',
    'Ïã†Ï∞ΩÎèô',
    'Ïã†Ìù•Îèô',
    'Ïñ¥Î£°Îèô',
    'Ïö∞ÏÇ∞Îèô',
    'Ïö¥ÎÇ®Îèô',
    'ÏõîÍ≥°Îèô',
    'ÏûÑÍ≥°Îèô',
    'Ï≤®Îã®Îèô',
    'ÌèâÎèô',
    'ÌïòÎÇ®Îèô',
  ],
  ÎÇ®Íµ¨: [
    'ÎåÄÏ¥åÎèô',
    'Î∞©Î¶ºÎèô',
    'Î∞±Ïö¥Îèô',
    'Î¥âÏÑ†Îèô',
    'ÏÇ¨ÏßÅÎèô',
    'ÏÜ°ÏïîÎèô',
    'ÏñëÎ¶ºÎèô',
    'ÏõîÏÇ∞Îèô',
    'ÏùºÏÇ∞Îèô',
    'Ï£ºÏõîÎèô',
    'ÏßÑÏõîÎèô',
    'Ìö®ÎçïÎèô',
  ],
  ÎèôÍµ¨: ['Í≥ÑÎ¶ºÎèô', 'ÎèôÎ™ÖÎèô', 'ÏÇ∞ÏàòÎèô', 'ÏÑúÎÇ®Îèô', 'ÏßÄÏÇ∞Îèô', 'ÏßÄÏõêÎèô', 'Ï∂©Ïû•Îèô', 'ÌïôÏö¥Îèô', 'ÌïôÎèô'],
  Î∂ÅÍµ¨: [
    'Í±¥Íµ≠Îèô',
    'ÎèôÎ¶ºÎèô',
    'ÎëêÏïîÎèô',
    'Îß§Í≥°Îèô',
    'Î¨∏ÌôîÎèô',
    'Î¨∏Ìù•Îèô',
    'ÏÇºÍ∞ÅÎèô',
    'ÏÑùÍ≥°Îèô',
    'Ïã†ÏïàÎèô',
    'Ïã†Ïö©Îèô',
    'ÏñëÏÉÅÎèô',
    'Ïò§ÏπòÎèô',
    'Ïö©Î¥âÎèô',
    'Ïö∞ÏÇ∞Îèô',
    'Ïö¥ÏïîÎèô',
    'ÏùºÍ≥°Îèô',
    'ÏûÑÎèô',
    'Ï§ëÏïôÎèô',
    'Ï§ëÌù•Îèô',
    'ÌíçÌñ•Îèô',
  ],
  ÏÑúÍµ¨: [
    'Í¥ëÏ≤úÎèô',
    'Í∏àÌò∏Îèô',
    'ÎÜçÏÑ±Îèô',
    'ÎèôÏ≤úÎèô',
    'ÏÉÅÎ¨¥Îèô',
    'ÏÑúÏ∞ΩÎèô',
    'ÏñëÎèô',
    'Ïú†ÎçïÎèô',
    'ÏπòÌèâÎèô',
    'ÌíçÏïîÎèô',
    'ÌôîÏ†ïÎèô',
  ],
};
// Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞
const categories = [
  'Ïö¥Îèô',
  'ÎßõÏßë',
  'ÎèôÎ¨º',
  'Ïó¨Ìñâ',
  'ÏòÅÌôî',
  'Í≤åÏûÑ',
  'ÎèÖÏÑú',
  'Í≥µÎ∂Ä',
  'ÏùåÏïÖ',
  'üîû',
  'ÏõπÌà∞',
  'Ïô∏Ìñ•Ìòï',
  'ÎÇ¥Ìñ•Ìòï',
  'Ïï†ÎãàÎ©îÏù¥ÏÖò',
];

// Î©îÏù∏ Ïï± Ïª¥Ìè¨ÎÑåÌä∏
const App = () => {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    gender: '',
    district: '',
    dong: '',
    id: '',
    password: '',
    confirmPassword: '',
    selectedCategories: new Set(),
  });
  const [showGenderOptions, setShowGenderOptions] = useState(false);
  const [showDistrictOptions, setShowDistrictOptions] = useState(false);
  const [showDongOptions, setShowDongOptions] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [idCheckMessage, setIdCheckMessage] = useState('');
  const [isIdAvailable, setIsIdAvailable] = useState(false);

  // axios Ïù∏Ïä§ÌÑ¥Ïä§: ÏÑúÎ≤Ñ Í∏∞Î≥∏ Ï£ºÏÜå(Ï†àÎåÄ URL)Î°ú ÏÑ§Ï†ï
  // Í∞úÎ∞úÌôòÍ≤ΩÏóêÏÑú Vite proxyÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ≥† ÏßÅÏ†ë Î∞±ÏóîÎìúÎ°ú ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉÖÎãàÎã§.
  const API = axios.create({
    baseURL: 'http://gsmsv-1.yujun.kr:27919/api/auth',
    headers: { 'Content-Type': 'application/json' },
    withCredentials: true,
    timeout: 5000,
  });

  // ÏÑ±Î≥Ñ Îß§Ìïë: ÌîÑÎ°†Ìä∏Ïùò ÌïúÍ∏ÄÍ∞íÏùÑ ÏÑúÎ≤ÑÏùò GENDER enum Í∞íÏúºÎ°ú Î≥ÄÌôò
  // ÏÑúÎ≤ÑÏùò Ïã§Ï†ú enum Í∞íÍ≥º Îã§Î•º Í≤ΩÏö∞ ÏïÑÎûò ÎßµÏùÑ ÏàòÏ†ïÌïòÏÑ∏Ïöî.
  const genderMap = {
    ÎÇ®Ïûê: 'MALE',
    Ïó¨Ïûê: 'FEMALE',
    Í∏∞ÌÉÄ: 'OTHER',
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  const toggleGenderOptions = () => setShowGenderOptions(!showGenderOptions);
  const toggleDistrictOptions = () => setShowDistrictOptions(!showDistrictOptions);
  const toggleDongOptions = () => setShowDongOptions(!showDongOptions);

  const handleGenderSelect = (gender) => {
    setFormData((prevData) => ({ ...prevData, gender }));
    setShowGenderOptions(false);
  };

  const handleDistrictSelect = (district) => {
    setFormData((prevData) => ({ ...prevData, district, dong: '' }));
    setShowDistrictOptions(false);
    setShowDongOptions(false);
  };

  // ÏïÑÏù¥Îîî Ï§ëÎ≥µ Í≤ÄÏÇ¨
  const handleCheckId = async () => {
    const id = formData.id && formData.id.trim();
    setIdCheckMessage('');
    setIsIdAvailable(false);

    if (!id) {
      setIdCheckMessage('ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      // ÏÑúÎ≤ÑÍ∞Ä login_id ÌïÑÎìúÎ•º Í∏∞ÎåÄÌï† Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÏñ¥ login_idÎ°ú Ï†ÑÏÜ°Ìï©ÎãàÎã§.
      // ÏóîÎìúÌè¨Ïù∏Ìä∏Îäî '/check-id'Î°ú Ìò∏Ï∂úÌï©ÎãàÎã§.
      const response = await API.post('/signup', { login_id: id });

      // ÏÑúÎ≤Ñ ÏùëÎãµ Ìè¨Îß∑Ïóê ÎßûÏ∂∞ Ï≤òÎ¶¨ (Ïòà: { available: true })
      if (response && response.data && response.data.available) {
        setIdCheckMessage('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.');
        setIsIdAvailable(true);
      } else {
        setIdCheckMessage('Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.');
        setIsIdAvailable(false);
      }
    } catch (error) {
      console.error('ID Ï§ëÎ≥µ Í≤ÄÏÇ¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
      // ÏÑúÎ≤ÑÏóêÏÑú Î∞òÌôòÌïú Î©îÏãúÏßÄÍ∞Ä ÏûàÏúºÎ©¥ Î≥¥Ïó¨Ï£ºÍ≥†, ÏóÜÏúºÎ©¥ ÏùºÎ∞ò Î©îÏãúÏßÄ
      if (error.response && error.response.data && error.response.data.message) {
        setIdCheckMessage(error.response.data.message);
      } else if (error.response && error.response.status) {
        setIdCheckMessage(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${error.response.status}`);
      } else {
        setIdCheckMessage('ID Ï§ëÎ≥µ Í≤ÄÏÇ¨ Ï§ë ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }
      setIsIdAvailable(false);
    }
  };

  const handleDongSelect = (dong) => {
    setFormData((prevData) => ({ ...prevData, dong }));
    setShowDongOptions(false);
  };

  const handleCategorySelect = (category) => {
    setFormData((prevData) => {
      const newCategories = new Set(prevData.selectedCategories);
      if (newCategories.has(category)) {
        newCategories.delete(category);
      } else {
        if (newCategories.size < 3) {
          newCategories.add(category);
        }
      }
      return { ...prevData, selectedCategories: newCategories };
    });
  };

  const isStep1Valid =
    formData.name.trim() !== '' &&
    formData.age.trim() !== '' &&
    formData.gender !== '' &&
    formData.district !== '' &&
    formData.dong !== '';

  const isPasswordMatch = formData.password === formData.confirmPassword;
  const isPasswordValid = formData.password.length >= 8;

  const isStep2Valid = formData.id.trim() !== '' && isPasswordValid && isPasswordMatch;

  const isStep3Valid = formData.selectedCategories.size === 3;

  const renderFormStep = () => {
    switch (step) {
      case 1: {
        const districts = Object.keys(dongData);
        const currentDongs = formData.district ? dongData[formData.district] : [];
        return (
          <>
            <div className="input-field">
              <input
                type="text"
                name="name"
                placeholder="Ïù¥Î¶Ñ"
                value={formData.name}
                onChange={handleChange}
              />
            </div>
            <div className="input-field">
              <input
                type="number"
                name="age"
                placeholder="ÎÇòÏù¥"
                value={formData.age}
                onChange={handleChange}
              />
            </div>
            <div className="select-wrap">
              <div className="select-box" onClick={toggleGenderOptions}>
                {formData.gender || 'ÏÑ±Î≥Ñ'}
                <span className="arrow">{showGenderOptions ? '‚ñ≤' : '‚ñº'}</span>
              </div>
              {showGenderOptions && (
                <div className="options-list">
                  <div className="option-item" onClick={() => handleGenderSelect('ÎÇ®Ïûê')}>
                    ÎÇ®Ïûê
                  </div>
                  <div className="option-item" onClick={() => handleGenderSelect('Ïó¨Ïûê')}>
                    Ïó¨Ïûê
                  </div>
                  <div className="option-item" onClick={() => handleGenderSelect('Í∏∞ÌÉÄ')}>
                    Í∏∞ÌÉÄ
                  </div>
                </div>
              )}
            </div>
            <div className="select-wrap two-col">
              <div className="select-group">
                <div className="select-box" onClick={toggleDistrictOptions}>
                  {formData.district || 'Íµ¨'}
                  <span className="arrow">{showDistrictOptions ? '‚ñ≤' : '‚ñº'}</span>
                </div>
                {showDistrictOptions && (
                  <div className="options-list">
                    {districts.map((dist) => (
                      <div
                        key={dist}
                        className="option-item"
                        onClick={() => handleDistrictSelect(dist)}
                      >
                        {dist}
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div className="select-group">
                <div className="select-box" onClick={toggleDongOptions}>
                  {formData.dong || 'Îèô'}
                  <span className="arrow">{showDongOptions ? '‚ñ≤' : '‚ñº'}</span>
                </div>
                {showDongOptions && (
                  <div className="options-list">
                    {currentDongs.length > 0 ? (
                      currentDongs.map((dong) => (
                        <div
                          key={dong}
                          className="option-item"
                          onClick={() => handleDongSelect(dong)}
                        >
                          {dong}
                        </div>
                      ))
                    ) : (
                      <div className="option-item disabled">Íµ¨Î•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</div>
                    )}
                  </div>
                )}
              </div>
            </div>
            <button className="btn-submit" onClick={() => setStep(2)} disabled={!isStep1Valid}>
              Îã§ÏùåÏúºÎ°ú
            </button>
            <p className="link-login">
              Ïù¥ÎØ∏ ÌöåÏõêÏù¥ÎùºÎ©¥? <a href="/">Î°úÍ∑∏Ïù∏ÌïòÍ∏∞</a>
            </p>
          </>
        );
      }
      case 2: {
        return (
          <>
            <div className="input-field id-field">
              <input
                type="text"
                name="id"
                placeholder="ÏïÑÏù¥Îîî"
                value={formData.id}
                onChange={handleChange}
              />
              <button
                className="btn-check"
                type="button"
                onClick={handleCheckId}
                disabled={!formData.id || formData.id.trim() === ''}
              >
                Ï§ëÎ≥µ Í≤ÄÏÇ¨
              </button>
            </div>
            {/* ÏïÑÏù¥Îîî Ï§ëÎ≥µ Í≤ÄÏÇ¨ Î©îÏãúÏßÄ */}
            {idCheckMessage && (
              <p className={`msg ${isIdAvailable ? 'success' : 'error'}`}>{idCheckMessage}</p>
            )}
            <div className="input-field pw-field">
              <input
                type={showPassword ? 'text' : 'password'}
                name="password"
                placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏"
                value={formData.password}
                onChange={handleChange}
              />
              <span className="toggle-pw" onClick={() => setShowPassword(!showPassword)}>
                {showPassword ? <EyeShow /> : <EyeHide />}
              </span>
            </div>
            {!isPasswordValid && formData.password.length > 0 && (
              <p className="msg-error">ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÏòÅÎ¨∏Í≥º Ïà´ÏûêÎ•º Ìè¨Ìï®ÌïòÏó¨ 8Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.</p>
            )}
            <div className="input-field pw-field">
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                name="confirmPassword"
                placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏"
                value={formData.confirmPassword}
                onChange={handleChange}
              />
              <span
                className="toggle-pw"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? <EyeShow /> : <EyeHide />}
              </span>
            </div>
            {formData.confirmPassword.length > 0 && !isPasswordMatch && (
              <p className="msg-error">ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
            )}
            <button className="btn-submit" onClick={() => setStep(3)} disabled={!isStep2Valid}>
              Îã§ÏùåÏúºÎ°ú
            </button>
          </>
        );
      }
      case 3: {
        return (
          <>
            <div className="category-wrap">
              <p className="category-text">ÎßàÏßÄÎßâÏúºÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ 3Í∞ÄÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</p>
              <div className="category-grid">
                {categories.map((cat) => (
                  <div
                    key={cat}
                    className={`category-item ${
                      formData.selectedCategories.has(cat) ? 'active' : ''
                    }`}
                    onClick={() => handleCategorySelect(cat)}
                  >
                    {cat}
                  </div>
                ))}
              </div>
            </div>
            <button
              className="btn-submit"
              onClick={async () => {
                // Í∞ÑÎã®Ìïú Ïú†Ìö®ÏÑ± ÏµúÏ¢Ö Í≤ÄÏÇ¨
                if (!isStep1Valid || !isStep2Valid || !isStep3Valid) {
                  alert('ÏûÖÎ†•Í∞íÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
                  return;
                }

                const newUser = {
                  name: formData.name,
                  age: formData.age,
                  gender: formData.gender,
                  district: formData.district,
                  dong: formData.dong,
                  id: formData.id,
                  // Î≥¥Ïïà: Ïã§Ï†ú ÏÑúÎπÑÏä§ÏóêÏÑúÎäî ÌèâÎ¨∏ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º localStorageÏóê Ï†ÄÏû•ÌïòÎ©¥ ÏïàÎê©ÎãàÎã§.
                  password: formData.password,
                  categories: Array.from(formData.selectedCategories),
                };

                // 1) Î°úÏª¨ Ï†ÄÏû• ÏòàÏãú: 'hcbc_users' ÌÇ§Î°ú Î∞∞Ïó¥Ïóê Ï†ÄÏû• (Í∞úÎ∞ú/ÌÖåÏä§Ìä∏Ïö©)
                try {
                  const raw = localStorage.getItem('hcbc_users');
                  const users = raw ? JSON.parse(raw) : [];
                  users.push(newUser);
                  localStorage.setItem('hcbc_users', JSON.stringify(users));
                } catch (e) {
                  console.error('localStorage error', e);
                  // Î°úÏª¨ Ï†ÄÏû• Ïã§Ìå®Ìï¥ÎèÑ ÏÑúÎ≤Ñ Ï†ÑÏÜ°ÏùÄ ÏãúÎèÑ
                }

                // 2) ÏÑúÎ≤Ñ Ï†ÑÏÜ° (API Ïù∏Ïä§ÌÑ¥Ïä§ ÏÇ¨Ïö©)
                // ÏÑúÎ≤ÑÍ∞Ä Í∏∞ÎåÄÌïòÎäî ÌïÑÎìúÎ™Ö/Ìè¨Îß∑ÏúºÎ°ú Î≥ÄÌôò
                const serverPayload = {
                  name: newUser.name,
                  // Ïà´Ïûê ÌÉÄÏûÖÏúºÎ°ú Ï†ÑÎã¨
                  age: Number(newUser.age) || 0,
                  // ÌîÑÎ°†Ìä∏Ïùò ÌïúÍ∏Ä ÏÑ±Î≥Ñ Í∞íÏùÑ ÏÑúÎ≤Ñ enumÏúºÎ°ú Î≥ÄÌôò
                  gender: genderMap[newUser.gender] || 'OTHER',
                  // ÏÑúÎ≤ÑÍ∞Ä Í∏∞ÎåÄÌïòÎäî ÌïÑÎìú Ïù¥Î¶Ñ: login_id
                  login_id: newUser.id,
                  password: newUser.password,
                  // Ïπ¥ÌÖåÍ≥†Î¶¨Îäî Î∞∞Ïó¥Î°ú Ï†ÑÎã¨Ìï©ÎãàÎã§. (ÏÑúÎ≤Ñ ÏöîÍµ¨ÏÇ¨Ìï≠Ïóê Îî∞Îùº Î≥ÄÍ≤Ω Í∞ÄÎä•)
                  category: newUser.categories,
                  // addressÎäî Íµ¨ + Îèô Ï°∞Ìï©ÏúºÎ°ú Ï†ÑÎã¨
                  address: `${newUser.district} ${newUser.dong}`.trim(),
                };

                try {
                  const res = await API.post('/signup', serverPayload);
                  console.log('server response', res.data);
                } catch (err) {
                  console.error('server error', err);
                  if (err.response && err.response.data && err.response.data.message) {
                    alert(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${err.response.data.message}`);
                  } else {
                    alert('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                  }
                }

                navigate('/'); // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
              }}
              disabled={!isStep3Valid}
            >
              ÌöåÏõêÍ∞ÄÏûÖÌïòÍ∏∞
            </button>
          </>
        );
      }
      default:
        return null;
    }
  };

  return (
    <div className="signup-page">
      <div className="card">
        <div className="logo-section">
          <Logo></Logo>
          <p className="logo-text">HCBC</p>
        </div>
        {renderFormStep()}
      </div>
    </div>
  );
};

export default App;
